<?php

namespace App\Telegram\Conversations;

use App\Models\Chat;
use Illuminate\Support\Facades\Auth;
use SergiX44\Nutgram\Conversations\Conversation;
use SergiX44\Nutgram\Nutgram;

class Transfer extends Conversation
{
    public function start(Nutgram $bot): void
    {
        $user = Auth::user();
        $chats = $user->leadership->chats()->whereNot('id', $user->id)->get()->map(fn (Chat $chat) => "<code>$chat->identifier</code>: <a href='tg://user?id={$chat->chat_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>")->implode("\n");
        $bot->sendImagedMessage("<b>üëã –í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã (—é–∑–µ—Ä–Ω–µ–π–º –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)</b>\n\n$chats");
        $this->next('chat');
    }

    public function chat(Nutgram $bot): void
    {
        $id = $bot->message()->text;
        $chat = Chat::query()->where('chat_id', $id)->orWhere('username', $id)->first();

        $user = Auth::user();
        $group = $user->leadership;

        if (!$chat || $chat->group->isNot($group) || $chat->is($user)) {

            $bot->sendImagedMessage("<b>‚õîÔ∏è –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –≤–≤–µ–ª–∏</b>");
            return;

        }

        $group->leader()->associate($chat)->save();
        $bot->sendImagedMessage("<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞ üéâüéâüéâ");
        $this->end();
    }
}
